#!/bin/bash

varfile="$1" # change this variable name to whatever- see line 2 of function

manage() { # change this function name to something that makes more sense
  # get the variables from the file into memory
  [[ -n $varfile ]] && source "$varfile" || echo "'$varfile' is invalid or cannot be read."

  for pkg in "${_pkglist[@]}"; do 
    local pkgvar="$(echo $pkg | sed 's/-/_/g')"

    # find PKGBUILDs
    if [[ -w "$pkg/PKGBUILD" ]]; then
      pkgb="$pkg/PKGBUILD"
    elif [[ -w "$pkg/$pkg/PKGBUILD" ]]; then
      pkgb="$pkg/PKGBUILD"
    else
      echo "Where is the '$pkg' PKGBUILD?"
      echo -n "> "
      read pkgb
      if ! [[ -w "$pkgb" ]]; then
        echo "That file is not writable."
        echo -n "Would you like to download this package to the working dir? [Y/n] "
        read ans
        if [[ $ans == n || $ans == N || $ans == no || $ans == NO ]]; then
           continue
        else
           ccr -G $pkg && rm $pkg.tar.gz
           [[ -w "$pkg/PKGBUILD" ]] && pkgb="$pkg/PKGBUILD" || (
             echo "could not find PKGBUILD. :("; exit 1) || continue
        fi
      fi
    fi

    # compare version numbers and update PKGBUILDs
    local npkgver="$(eval echo \$$pkgvar)"
    local opkgver="$(grep "^pkgver=.*" "$pkgb" | sed 's/pkgver=//')"
    if [[ $npkgver > $opkgver ]]; then
      if [[ $dontask != 1 ]]; then
        echo -e "New version of $pkg found: $npkgver\nOld version: $opkgver"
        echo -n "Would you like to update the pkgbuild? [Y/n] "
        read ans
      else
        ans=y
      fi
      if [[ $ans == n || $ans == N || $ans == no || $ans == NO ]]; then
        echo "Not updating $pkg PKGBUILD."
        continue
      else
        sed -i "s/pkgver=$opkgver/pkgver=$npkgver/" "$pkgb"
        sed -i 's/^pkgrel=.*/pkgrel=1/' "$pkgb"
        upkgz+=("$pkg")
      fi
    fi
  done
  echo "PKGBUILDs updated: ${upkgz[@]-None}"
}

manage "$1"
